user root;
daemon off;
worker_processes auto;
error_log /dev/stdout info;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;

    tcp_nodelay on;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream vnc {
        server 0.0.0.1; # dummy value

        balancer_by_lua_block {
            local balancer = require 'ngx.balancer'

            local ok, err = balancer.set_current_peer(ngx.ctx.host, ngx.ctx.port)
            if not ok then
                ngx.log(ngx.ERR, 'failed to set upstream to '..ngx.ctx.host..':'..ngx.ctx.port..': ', err)
                return ngx.exit(500)
            end
        }
    }

    server {
        listen 80 default_server;
        server_name _;

        location / {
            proxy_pass http://unix:/run/distry.sock;
        }
        location /static/novnc {
            rewrite ^/static/novnc/(.*)$ /$1 break;

            autoindex off;
            root /opt/novnc;
        }
        location /vnc {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 86400;

            proxy_pass http://vnc;

            rewrite_by_lua_block {
                local redis = require 'resty.redis'
                local id = ngx.var.uri:match('^/vnc/([^/]+)/?$')
                if not id then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say('no VM id provided')
                    return ngx.exit(ngx.status)
                end
                ngx.log(ngx.DEBUG, 'id is '..id)


                local r = redis:new()
                r:set_timeouts(1000, 1000, 1000)

                local ok, err = r:connect('unix:/run/redis.sock')
                if not ok then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say('failed to connect to redis: ', err)
                    return ngx.exit(ngx.status)
                end

                local res, err = r:get(id)
                if not res then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say('failed to get key from redis: ', err)
                    return ngx.exit(ngx.status)
                end
                if res == ngx.null then
                    ngx.status = ngx.HTTP_NOT_FOUND
                    ngx.say('VM '..id..' does not exist')
                    return ngx.exit(ngx.status)
                end

                local host, port = res:match('^(.+):(%d+)$')
                ngx.ctx.host = host
                ngx.ctx.port = tonumber(port)
                ngx.req.set_uri('/', false)
            }
        }
    }
}
